import hashlib
from aiogram import types, Bot, Dispatcher
from create_bot import bot, dp
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from weather import get_weather
import time, datetime, os
from house import house_database
from youtube.youtube_parser import searcher
from googletrans import Translator

class FSMsity(StatesGroup):
    ask_sity = State()
    answer_sity = State()

# @dp.message_handler(commands=["start","help"])
async def commands_start(message: types.Message):
    await message.answer_sticker(r'CAACAgIAAxkBAAEDLNJhesopOAINZdbMB8qtORxviLdkygACNQUAAkb7rAQ1FgQgV19OpSEE')
    await bot.send_message(message.from_user.id, "–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞?", reply_markup=kb_client)


# @dp.message_handler(text=['–ü–æ–≥–æ–¥–∞'])
async def text_weather(message: types.Message):
    await message.answer_sticker(r'CAACAgIAAxkBAAEDLNphesuURXxXGtCKkTsR0GutPAlQ9wACMwUAAkb7rARoQzS0QtDEbyEE')
    await bot.send_message(message.from_user.id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?", reply_markup=kb_weather)


# @dp.message_handler(text=['–ü–∏—Ç–µ—Ä'])
async def text_weather_spb(message: types.Message):
    await bot.send_message(message.from_user.id, "–ú–µ—Ç–µ–æ—Ü–µ–Ω—Ç—Ä '–ö—Ä—ã–ª—å—è –ø–æ –≤–µ—Ç—Ä—É' –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ä–∞–±–æ—Ç–µ")
    time.sleep(1)
    answer = get_weather.getting_temperature("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    await bot.send_message(message.from_user.id, "–ó–∞ –æ–∫–Ω–æ–º —Å–µ–π—á–∞—Å " + str(answer) + " –≥—Ä–∞–¥—É—Å–æ–≤")
    answer = get_weather.getting_wind("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    await bot.send_message(message.from_user.id, "–í–µ—Ç–µ—Ä–æ–∫ –ø–æ–¥–¥—É–≤–∞–µ—Ç –Ω–∞ " + str(answer) + " –º/—Å")
    answer = get_weather.getting_humidity("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    await bot.send_message(message.from_user.id, "–í–ª–∞–∂–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç " + str(answer) +"%")
    answer = get_weather.getting_status("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    await bot.send_message(message.from_user.id, "–í –Ω–µ–±–µ—Å–∞—Ö " + str(answer))
    await message.answer_sticker(r'CAACAgIAAxkBAAEDLPdhetiCvFUxQCNSiK9UxGumszRxAAM-BQACRvusBOPYSrsbHfRjIQQ')

# @dp.message_handler(text=['–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥'], state=None)
async def text_weather_another_ask(message: types.Message, state=FSMsity):
    await FSMsity.ask_sity.set()
    await message.answer_sticker(r'CAACAgIAAxkBAAEDLPlhettBikO-tZDv6ijU8i-tx8FxqAACMwUAAkb7rARoQzS0QtDEbyEE')
    await message.reply("–¢–∞–∫, –∏ –æ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –º—ã –≥–æ–≤–æ—Ä–∏–º?")


#@dp.message_handler(state=FSMsity.ask_sity)
async def text_weather_another_answer(message: types.Message,state=FSMsity):
    try:
        city = message.text
        await bot.send_message(message.from_user.id, "–ú–µ—Ç–µ–æ—Ü–µ–Ω—Ç—Ä '–ö—Ä—ã–ª—å—è –ø–æ –≤–µ—Ç—Ä—É' –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ä–∞–±–æ—Ç–µ")
        time.sleep(1)
        answer = get_weather.getting_temperature(city)
        await bot.send_message(message.from_user.id, "–ó–∞ –æ–∫–Ω–æ–º —Å–µ–π—á–∞—Å " + str(answer) + " ¬∞–°")
        answer = get_weather.getting_wind(city)
        await bot.send_message(message.from_user.id, "–í–µ—Ç–µ—Ä–æ–∫ –ø–æ–¥–¥—É–≤–∞–µ—Ç –Ω–∞ " + str(answer) + " –º/—Å")
        answer = get_weather.getting_humidity(city)
        await bot.send_message(message.from_user.id, "–í–ª–∞–∂–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç " + str(answer) +"%")
        answer = get_weather.getting_status(city)
        await bot.send_message(message.from_user.id, "–í –Ω–µ–±–µ—Å–∞—Ö " + str(answer))
        await message.answer_sticker(r'CAACAgIAAxkBAAEDLPdhetiCvFUxQCNSiK9UxGumszRxAAM-BQACRvusBOPYSrsbHfRjIQQ')
        await state.finish()
    except:
        await message.answer_sticker(r'CAACAgIAAxkBAAEDLQJheuFvKnHJHmkoE6BdVuQvUaFTeAACLwUAAkb7rAQP18VQze5AgCEE')
        await bot.send_message(message.from_user.id, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.finish()

class FSMhouse(StatesGroup):
    ask_house_date = State()
    ask_house_date_free = State()
    ask_house_counter = State()
    answer_house_counter = State()


# @dp.message_handler(text=['–ö–æ—à–∫–∏–Ω –¥–æ–º'])
async def text_house(message: types.Message):
    await bot.send_message(message.from_user.id, "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=kb_home_counter)


# @dp.message_handler(text=['–ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ 3 –º–µ—Å'])
async def text_3month(message: types.Message):
    await bot.send_message(message.from_user.id, '–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ —Å–∏—Ç—É–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–∞—è:')
    await house_database.sql_read_last3(message)
    await house_database.sql_read_price(message)

# @dp.message_handler(text=['–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è'])
async def text_months(message: types.Message):
    await bot.send_message(message.from_user.id, '–û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞ —Ç–∞–∫–æ–≤–∞:')
    await house_database.sql_read(message)

# @dp.message_handler(text=['–í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ'])
async def text_input_data(message: types.Message, state=FSMhouse):
    await bot.send_message(message.from_user.id, '–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –ø–æ–∫–∞–∑–∞–Ω–∏–π')
    await bot.send_message(message.from_user.id, '–ó–∞–ø–∏—à–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º —á–∏—Å–ª–æ–º –∏–ª–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å?', reply_markup=kb_date)
    await FSMhouse.ask_house_date.set()

# @dp.message_handler(text=['–ó–∞–ø–∏—à–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'])
async def text_input_date_self(message: types.Message, state=FSMhouse):
    async with state.proxy() as data:
        data['date'] = datetime.date.today()
    await bot.send_message(message.from_user.id, '–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞, –∞ —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–π –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞')
    await FSMhouse.ask_house_counter.set()


# @dp.message_handler(text=['–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É'])
async def text_input_date_another(message: types.Message, state=FSMhouse):
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏–¥–µ –¥–∞—Ç—É –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥ –º–µ—Å—è—Ü –¥–µ–Ω—å:')
    await bot.send_message(message.from_user.id, '–Ω–∞–ø—Ä–∏–º–µ—Ä, 20211101 (–≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å)')
    await FSMhouse.ask_house_date_free.set()

# @dp.message_handler(state=ask_house_date_free.set())
async def text_input_date_another_step2(message: types.Message, state=FSMhouse):
    try:
        async with state.proxy() as data:
            data['date'] = datetime.datetime.strptime(message.text, '%Y%m%d').date()
        await bot.send_message(message.from_user.id, '–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞, –∞ —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–π –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞')
        await FSMhouse.ask_house_counter.set()
    except:
        current_state = await state.get_state()
        await bot.send_message(message.from_user.id, "–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ", reply_markup=kb_home_counter)
        if current_state is None:
            return
        await state.finish()

# @dp.message_handler(state=FSMhouse.ask_house_counter)
async def text_input_counter(message: types.Message, state=FSMhouse):
    async with state.proxy() as data:
        data['counter'] = int(message.text)
    await house_database.sql_add(state)
    await state.finish()
    await bot.send_message(message.from_user.id, '–ü–æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã', reply_markup=kb_home_counter)


# @dp.message_handler(text=['–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å'])
async def text_delete(message: types.Message):
    read = await house_database.sql_read2()
    for ret in read:
        await bot.send_message(message.from_user.id, f"–ù–∞ {ret[0]} - {ret[1]} –∫–í—Ç")
        await bot.send_message(message.from_user.id, text="^^^", reply_markup=InlineKeyboardMarkup(). \
                               add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ—Ç {ret[0]}', callback_data=f'del {ret[0]}')))

@dp.callback_query_handler (lambda x: x.data and x.data.startswith("del "))
async def callback_run(callback_query : types.CallbackQuery):
    await house_database.sql_delete_command(callback_query.data.replace("del ", ""))
    await callback_query.answer(text=f'{callback_query.data.replace("del ", "")} —É–¥–∞–ª–µ–Ω–∞.', show_alert=True)


# @dp.message_handler(text=['–ù–∞–∑–∞–¥'])
async def text_back(message: types.Message):
    await bot.send_message(message.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb_client)

# @dp.message_handler(text=['–û—Ç–º–µ–Ω–∞'])
async def text_cancel(message: types.Message, state=FSMhouse):
    current_state = await state.get_state()
    await bot.send_message(message.from_user.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_client)
    if current_state is None:
        return
    await state.finish()


class FSMyt(StatesGroup):
    yt_ask = State()
    yt_answer = State()


# @dp.message_handler(text=['–ü–æ–∏—Å–∫ –Ω–∞ YouTube'])
async def text_ytserach_ask(message: types.Message):
    await bot.send_message(message.from_user.id, "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?")
    await FSMyt.yt_ask.set()

# @dp.message_handler(text=['–ü–æ–∏—Å–∫ –Ω–∞ YouTube'])
async def text_ytserach_amswer(message:types.Message, state=FSMyt):
    await bot.send_message(message.from_user.id, "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ —Ç–æ–ø–µ –≤—ã–¥–∞—á–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ:")
    links = searcher(message.text)
    for link in links:
        answer = f'https://www.youtube.com/watch?v={link["id"]}'
        await bot.send_message(message.from_user.id, answer)
    await state.finish()


class FSMtranslate(StatesGroup):
    language_select = State()
    translate_start = State()
    translate_answer = State()

# @dp.message_handler(text=['üéÜ–ü–µ—Ä–µ–≤–æ–¥ —Å Google Translate'])
async def text_gtranslate_select_language(message: types.Message):
    await bot.send_message(message.from_user.id, "–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?", reply_markup=kb_language)
    await FSMtranslate.language_select.set()

# @dp.message_handlerstate=FSMtranslate.language_select()
async def text_gtranslate_start(message: types.Message):
    global language_from_user
    language_from_user = message.text
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏", reply_markup=kb_cancel)
    await FSMtranslate.next()


# @dp.message_handler(state=FSMtranslate. translate_start)
async def text_gtranslate_answer(message: types.Message, state=FSMtranslate):
    gTrans = Translator()
    #try:
    if language_from_user == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π":
        language = 'en'
        answer = gTrans.translate(message.text, language).text
        await bot.send_message(message.from_user.id, answer, reply_markup=kb_client)
    elif language_from_user == "–†—É—Å—Å–∫–∏–π":
        language = 'ru'
        answer = gTrans.translate(message.text, language).text
        await bot.send_message(message.from_user.id, answer, reply_markup=kb_client)
    else:
        await bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω —è–∑—ã–∫ - –∞–π–¥–∞ —Å–Ω–∞—á–∞–ª–∞!", reply_markup=kb_client)
    '''except:
        await message.answer_sticker(r'CAACAgIAAxkBAAEDLQJheuFvKnHJHmkoE6BdVuQvUaFTeAACLwUAAkb7rAQP18VQze5AgCEE')
        await bot.send_message(message.from_user.id, "–û—Ö, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!", reply_markup=kb_client)'''
    await state.finish()


def register_client_handlers(dp: Dispatcher):
    dp.register_message_handler(commands_start, commands=["start", "help"])
    dp.register_message_handler(text_cancel, text=['–û—Ç–º–µ–Ω–∞'], state="*")
    dp.register_message_handler(text_weather, text=['üå¶–ü–æ–≥–æ–¥–∞Ô∏è'])
    dp.register_message_handler(text_house, text=['üê±–ö–æ—à–∫–∏–Ω –¥–æ–º'])
    dp.register_message_handler(text_weather_spb, text=['–ü–∏—Ç–µ—Ä'])
    dp.register_message_handler(text_weather_another_ask, text=['–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥'], state=None)
    dp.register_message_handler(text_weather_another_answer, state=FSMsity.ask_sity)
    dp.register_message_handler(text_house, text=['üê±–ö–æ—à–∫–∏–Ω –¥–æ–º'])
    dp.register_message_handler(text_3month, text=['–ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ 3 –º–µ—Å'])
    dp.register_message_handler(text_months, text=['–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è'])
    dp.register_message_handler(text_input_data, text=['–í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ'])
    dp.register_message_handler(text_input_date_self, text=['–ó–∞–ø–∏—à–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'], state=FSMhouse.ask_house_date)
    dp.register_message_handler(text_input_date_another, text=['–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É'], state=FSMhouse.ask_house_date)
    dp.register_message_handler(text_input_date_another_step2, state=FSMhouse.ask_house_date_free)
    dp.register_message_handler(text_input_counter, state=FSMhouse.ask_house_counter)
    dp.register_message_handler(text_delete, text=['–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å'])
    dp.register_message_handler(text_ytserach_ask, text=['üîé–ü–æ–∏—Å–∫ –Ω–∞ YouTube'], state=None)
    dp.register_message_handler(text_ytserach_amswer, state=FSMyt.yt_ask)
    dp.register_message_handler(text_gtranslate_select_language, text=['üè∑–ü–µ—Ä–µ–≤–æ–¥ —Å Google Translate'], state=None)
    dp.register_message_handler(text_gtranslate_start, state=FSMtranslate.language_select)
    dp.register_message_handler(text_gtranslate_answer, state=FSMtranslate.translate_start)
    dp.register_message_handler(text_back, text=['–ù–∞–∑–∞–¥'])


btn1 = KeyboardButton('üå¶–ü–æ–≥–æ–¥–∞Ô∏è')
btn2 = KeyboardButton('üê±–ö–æ—à–∫–∏–Ω –¥–æ–º')
btn3 = KeyboardButton('üîé–ü–æ–∏—Å–∫ –Ω–∞ YouTube')
btn4 = KeyboardButton('üè∑–ü–µ—Ä–µ–≤–æ–¥ —Å Google Translate')
kb_client = ReplyKeyboardMarkup(resize_keyboard=True)
kb_client.row(btn1, btn2).row(btn3, btn4)

w_btn1 = KeyboardButton('–ü–∏—Ç–µ—Ä')
w_btn2 = KeyboardButton('–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥')
w_btn3 = KeyboardButton('–ù–∞–∑–∞–¥')
kb_weather = ReplyKeyboardMarkup(resize_keyboard=True).row(w_btn1, w_btn2).add(w_btn3)

h_btn1 = KeyboardButton('–ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ 3 –º–µ—Å')
h_btn2 = KeyboardButton('–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è')
h_btn3 = KeyboardButton('–í–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ')
h_btn4 = KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å')
h_btn5 = KeyboardButton('–ù–∞–∑–∞–¥')
kb_home_counter = ReplyKeyboardMarkup(resize_keyboard=True).row(h_btn1, h_btn2).row(h_btn3, h_btn4).add(h_btn5)

d_btn1 = KeyboardButton('–ó–∞–ø–∏—à–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
d_btn2 = KeyboardButton('–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –¥–∞—Ç—É')
d_btn3 = KeyboardButton('–û—Ç–º–µ–Ω–∞')
kb_date = ReplyKeyboardMarkup(resize_keyboard=True).row(d_btn1,d_btn2).add(d_btn3)

c_btn1 = KeyboardButton('–û—Ç–º–µ–Ω–∞')
kb_cancel = ReplyKeyboardMarkup(resize_keyboard=True).row(c_btn1)

t_btn1 = KeyboardButton('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π')
t_btn2 = KeyboardButton('–†—É—Å—Å–∫–∏–π')
kb_language = ReplyKeyboardMarkup(resize_keyboard=True).row(t_btn1,t_btn2)